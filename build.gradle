buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		maven { url "http://repo.spring.io/plugins-release" }
	}

	dependencies {
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.9.0'
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
		classpath "me.champeau.gradle:jmh-gradle-plugin:0.2.0"
	}
}

apply plugin: 'java'

apply plugin: 'eclipse'

apply plugin: "me.champeau.gradle.jmh"

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

group = "com.github.akarnokd"
ext.githubProjectName = 'akarnokd-reactive-rpc'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
	ext.mainClass = ''
}



apply from: file('gradle/maven.gradle')

repositories {
	mavenCentral()
//    maven { url 'https://oss.jfrog.org/libs-snapshot' }
    maven { url 'http://repo.spring.io/libs-snapshot' }
}

apply plugin: 'maven'
apply plugin: 'osgi'

dependencies {
	compile 'org.reactivestreams:reactive-streams:1.0.0'
	compile 'io.projectreactor:reactive-streams-commons:0.4.0.BUILD-SNAPSHOT'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

processResources {
	from('src/main/java') {
		include '**/*.conf'
	}
}

[compileJava, compileTestJava]*.options*.compilerArgs << "-parameters"

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters";
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

configurations.all {
  // check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

jar {
	manifest {
		name = 'reactive-streams-commons'
		instruction 'Bundle-Vendor', 'akarnokd'
		instruction 'Bundle-DocURL', 'https://github.com/akarnokd/akarnokd-reactive-rpc'
		instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*'
		instruction 'Eclipse-ExtensibleAPI', 'true'
	}
}

apply plugin: 'license'

apply from: file('gradle/license.gradle')

jmh {
	jmhVersion = '1.11.3'
	humanOutputFile = null
	if (project.hasProperty('jmh')) {
		include = ".*" + project.jmh + ".*"
	} else {
		include = ".*"
	}
}

plugins.withType(EclipsePlugin) {
	project.eclipse.classpath.plusConfigurations += [configurations.jmh]
}

javadoc {
	failOnError = false
}

test {
	maxHeapSize = "2g"
	testLogging {
		events "started", "failed" // "skipped", "passed"
		//    showStandardStreams = true
        exceptionFormat = 'full'
	}
}